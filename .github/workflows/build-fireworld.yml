name: Build fireworld Release

on:
  workflow_dispatch:

jobs:
  BuildRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Checkout submodules
        run: git submodule update --init --recursive --force

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Get tag version
        run: |
          # 如果是手动触发 (workflow_dispatch)
          if [ "$GITHUB_EVENT_NAME" = "workflow_dispatch" ]; then
            # 获取所有 Tag（确保包含远程 Tag）
            git fetch --tags
            # 按版本号排序获取最新 Tag（兼容语义化版本）
            LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "nightly")

            # 去掉 Tag 名称中的 'v' 前缀
            VERSION="${LATEST_TAG}"
          else
           # 原有逻辑：从推送的 Tag 中提取版本号
           TAG_VERSION="${GITHUB_REF##*/}"
           VERSION="${TAG_VERSION}"
          fi

          # 处理无 Tag 的情况（可选：报错或默认值）
          if [ -z "$VERSION" ]; then
            echo "::error::No valid tag found!"
            VERSION="0.0.0"
          fi

          # 将信息写入环境变量
          echo "TAG_NAME=$LATEST_TAG" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Release Build
        run: |
          ./gradlew --no-daemon app:assembleMetaRelease
          # mv app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/ClashMetaForAndroid-${{ env.VERSION }}.apk

      - uses: r0adkll/sign-android-release@v1
        name: Sign app APK
        id: sign-ClashMetaForAndroid
        with:
          releaseDirectory: app/build/outputs/apk/meta/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}


      - name: Publish signed apk package
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            # ${{steps.sign-ClashMetaForAndroid.outputs.signedReleaseFile}}
            app/build/outputs/apk/meta/release/*
      
